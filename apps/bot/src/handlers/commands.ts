import { Bot, Context } from 'grammy';
import { bookMenu, mainMenu } from '../keyboards';
import { logger } from '../utils/logger';
import { apiClient } from '../services/api-client';

export function setupCommands(bot: Bot) {
  // /start command
  bot.command('start', async (ctx: Context) => {
    const startParam = ctx.match as string;
    
    if (startParam) {
      // Deep-link with promoter code
      const promoterCode = startParam.startsWith('promoter_') 
        ? startParam.replace('promoter_', '')
        : startParam;
      
      await ctx.reply(
        `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ClubSuite!\n\n` +
        `–í–∞—à –ø—Ä–æ–º–æ—É—Ç–µ—Ä: *${promoterCode}*\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üëá`,
        { 
          parse_mode: 'Markdown',
          reply_markup: mainMenu
        }
      );
      
      logger.info(`New user joined with promoter code: ${promoterCode}`);
    } else {
      await ctx.reply(
        `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ClubSuite!\n\n` +
        `–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–æ–≤ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –ø—Ä–µ–º–∏—É–º –∫–ª—É–±–∞—Ö.\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üëá`,
        { reply_markup: mainMenu }
      );
    }
  });

  // /menu command
  bot.command('menu', async (ctx: Context) => {
    await ctx.reply(
      'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
      { reply_markup: mainMenu }
    );
  });

  // /book command
  bot.command('book', async (ctx: Context) => {
    await ctx.reply(
      'üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      { reply_markup: bookMenu }
    );
  });

  // /events command
  bot.command('events', async (ctx: Context) => {
    try {
      // Get events from API
      // const userId = ctx.from?.id.toString();
      // const telegramId = ctx.from?.id.toString();
      
      const events = await apiClient.getEvents();
      
      if (!events || events.length === 0) {
        await ctx.reply(
          'üìÖ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!',
          { reply_markup: mainMenu }
        );
        return;
      }

      // Send first event
      const event = events[0];
      const eventDate = new Date(event.date).toLocaleDateString('ru-RU');
      
      await ctx.reply(
        `üéâ *${event.name}*\n\n` +
        `üìÖ –î–∞—Ç–∞: ${eventDate}\n` +
        `üïê –í—Ä–µ–º—è: ${event.startTime ? new Date(event.startTime).toLocaleTimeString('ru-RU') : 'TBD'}\n` +
        `üìç ${event.venue?.name || 'TBD'}\n\n` +
        `üí∞ –í—Ö–æ–¥: $${event.coverCharge || 0}\n\n` +
        `${event.description || ''}`,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç', web_app: { url: `${process.env.WEBAPP_BASE_URL}/app?event=${event.id}` } }
              ],
              [
                { text: 'üìù –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª', web_app: { url: `${process.env.WEBAPP_BASE_URL}/app?action=book&event=${event.id}` } }
              ],
              [
                { text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }
              ]
            ]
          }
        }
      );
    } catch (error) {
      logger.error('Error fetching events:', error);
      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        { reply_markup: mainMenu }
      );
    }
  });

  // /my command
  bot.command('my', async (ctx: Context) => {
    await ctx.reply(
      'üë§ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –±–∏–ª–µ—Ç—ã\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìÖ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', callback_data: 'my_reservations' },
              { text: 'üé´ –ú–æ–∏ –±–∏–ª–µ—Ç—ã', callback_data: 'my_tickets' }
            ],
            [
              { text: 'üí≥ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç', callback_data: 'my_payments' }
            ],
            [
              { text: '‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
            ]
          ]
        }
      }
    );
  });

  // /help command
  bot.command('help', async (ctx: Context) => {
    await ctx.reply(
      'üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ ClubSuite*\n\n' +
      '*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n' +
      '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n' +
      '/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n' +
      '/book - –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∞\n' +
      '/events - –°–æ–±—ã—Ç–∏—è\n' +
      '/my - –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n' +
      '/help - –°–ø—Ä–∞–≤–∫–∞\n\n' +
      '*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n' +
      '1Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ\n' +
      '2Ô∏è‚É£ –ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ —Å—Ç–æ–ª –∏–ª–∏ –∫—É–ø–∏—Ç–µ –±–∏–ª–µ—Ç\n' +
      '3Ô∏è‚É£ –û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram Payments\n' +
      '4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ QR-–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞\n\n' +
      'üí° –î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å Mini App"',
      { 
        parse_mode: 'Markdown',
        reply_markup: mainMenu
      }
    );
  });
}
