import { Context } from 'grammy';
import { apiClient } from '../services/api-client.js';
import { logger } from '../utils/logger.js';
import { bookMenu, eventsMenu, myMenu, mainMenu } from '../keyboards/index.js';

export function setupCallbacks(bot: any) {
  // Main menu
  bot.callbackQuery('main_menu', async (ctx: Context) => {
    await ctx.answerCallbackQuery();
    await ctx.editMessageText(
      'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
      { reply_markup: mainMenu }
    );
  });

  // Book menu
  bot.callbackQuery('book', async (ctx: Context) => {
    await ctx.answerCallbackQuery();
    await ctx.editMessageText(
      'üìÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      { reply_markup: bookMenu }
    );
  });

  // Events menu
  bot.callbackQuery('events', async (ctx: Context) => {
    await ctx.answerCallbackQuery();
    await ctx.editMessageText(
      'üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      { reply_markup: eventsMenu }
    );
  });

  // My menu
  bot.callbackQuery('my_menu', async (ctx: Context) => {
    await ctx.answerCallbackQuery();
    await ctx.editMessageText(
      'üë§ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
      { reply_markup: myMenu }
    );
  });

  // My reservations
  bot.callbackQuery('my_reservations', async (ctx: Context) => {
    try {
      await ctx.answerCallbackQuery('–ó–∞–≥—Ä—É–∑–∫–∞...');
      
      const userId = ctx.from?.id.toString();
      const reservations = await apiClient.getReservations(userId || '');
      
      if (!reservations || reservations.length === 0) {
        await ctx.editMessageText(
          'üìÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.\n\n–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ —Å—Ç–æ–ª –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!',
          { reply_markup: bookMenu }
        );
        return;
      }

      const reservation = reservations[0];
      const date = new Date(reservation.reservationDate).toLocaleString('ru-RU');
      
      await ctx.editMessageText(
        `üìÖ *–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #${reservation.id.slice(0, 8)}*\n\n` +
        `üìÖ –î–∞—Ç–∞: ${date}\n` +
        `üë• –ì–æ—Å—Ç–µ–π: ${reservation.guestCount}\n` +
        `üìä –°—Ç–∞—Ç—É—Å: ${reservation.status}\n\n` +
        `${reservation.event?.name ? `üéâ ${reservation.event.name}` : ''}`,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üì± –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏', web_app: { url: `${process.env.WEBAPP_BASE_URL}/app?reservation=${reservation.id}` } }
              ],
              [
                { text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'my_menu' }
              ]
            ]
          }
        }
      );
    } catch (error) {
      logger.error('Error fetching reservations:', error);
      await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
    }
  });

  // My tickets
  bot.callbackQuery('my_tickets', async (ctx: Context) => {
    try {
      await ctx.answerCallbackQuery('–ó–∞–≥—Ä—É–∑–∫–∞...');
      
      const userId = ctx.from?.id.toString();
      const tickets = await apiClient.getTickets(userId || '');
      
      if (!tickets || tickets.length === 0) {
        await ctx.editMessageText(
          'üé´ –£ –≤–∞—Å –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤.\n\n–ö—É–ø–∏—Ç–µ –±–∏–ª–µ—Ç –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!',
          { reply_markup: eventsMenu }
        );
        return;
      }

      const ticket = tickets[0];
      const eventDate = new Date(ticket.event.date).toLocaleDateString('ru-RU');
      
      await ctx.editMessageText(
        `üé´ *–í–∞—à –±–∏–ª–µ—Ç*\n\n` +
        `üéâ –°–æ–±—ã—Ç–∏–µ: ${ticket.event.name}\n` +
        `üìÖ –î–∞—Ç–∞: ${eventDate}\n` +
        `üí∞ –¢–∏–ø: ${ticket.type}\n` +
        `üìä –°—Ç–∞—Ç—É—Å: ${ticket.isScanned ? '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' : '–ê–∫—Ç–∏–≤–µ–Ω'}\n\n` +
        `${ticket.isScanned ? '‚úÖ –ë–∏–ª–µ—Ç —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' : 'üì± –ü–æ–∫–∞–∂–∏—Ç–µ QR-–∫–æ–¥ –Ω–∞ –≤—Ö–æ–¥–µ'}`,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üì± –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å QR', web_app: { url: `${process.env.WEBAPP_BASE_URL}/app?ticket=${ticket.id}` } }
              ],
              [
                { text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'my_menu' }
              ]
            ]
          }
        }
      );
    } catch (error) {
      logger.error('Error fetching tickets:', error);
      await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
    }
  });

  // Payment for reservation
  bot.callbackQuery(/^pay_reservation_(.+)$/, async (ctx: Context) => {
    const reservationId = Array.isArray((ctx as any).match)
      ? (ctx as any).match[1]
      : String((ctx as any).match ?? '');
    await ctx.answerCallbackQuery('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...');
    
    // Here you would create an invoice
    // This is handled in payments handler
    logger.info(`Payment requested for reservation: ${reservationId}`);
    
    await ctx.reply(
      'üí≥ –ü–ª–∞—Ç–µ–∂ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è...\n\n–°–∫–æ—Ä–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã.',
      { reply_markup: mainMenu }
    );
  });

  // Help
  bot.callbackQuery('help', async (ctx: Context) => {
    await ctx.answerCallbackQuery();
    await ctx.editMessageText(
      'üìö *–°–ø—Ä–∞–≤–∫–∞*\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:\n\n' +
      'üëÜ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏',
      { 
        parse_mode: 'Markdown',
        reply_markup: mainMenu
      }
    );
  });
}
